# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fremen/UpdateGridRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class UpdateGridRequest(genpy.Message):
  _md5sum = "052e23eecbb3e5588e343621f460e6c6"
  _type = "fremen/UpdateGridRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string mapname
int32 order
float32 precision
bool lossy
"""
  __slots__ = ['mapname','order','precision','lossy']
  _slot_types = ['string','int32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mapname,order,precision,lossy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UpdateGridRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mapname is None:
        self.mapname = ''
      if self.order is None:
        self.order = 0
      if self.precision is None:
        self.precision = 0.
      if self.lossy is None:
        self.lossy = False
    else:
      self.mapname = ''
      self.order = 0
      self.precision = 0.
      self.lossy = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.mapname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ifB().pack(_x.order, _x.precision, _x.lossy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mapname = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mapname = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.order, _x.precision, _x.lossy,) = _get_struct_ifB().unpack(str[start:end])
      self.lossy = bool(self.lossy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.mapname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ifB().pack(_x.order, _x.precision, _x.lossy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mapname = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mapname = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.order, _x.precision, _x.lossy,) = _get_struct_ifB().unpack(str[start:end])
      self.lossy = bool(self.lossy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_ifB = None
def _get_struct_ifB():
    global _struct_ifB
    if _struct_ifB is None:
        _struct_ifB = struct.Struct("<ifB")
    return _struct_ifB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fremen/UpdateGridResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class UpdateGridResponse(genpy.Message):
  _md5sum = "2be2b95dcbfa6dd0565a9eae4ac32d50"
  _type = "fremen/UpdateGridResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 allError
float32 nonemptyError
float32 dynamicError
int64 size
bool result

"""
  __slots__ = ['allError','nonemptyError','dynamicError','size','result']
  _slot_types = ['float32','float32','float32','int64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       allError,nonemptyError,dynamicError,size,result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UpdateGridResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.allError is None:
        self.allError = 0.
      if self.nonemptyError is None:
        self.nonemptyError = 0.
      if self.dynamicError is None:
        self.dynamicError = 0.
      if self.size is None:
        self.size = 0
      if self.result is None:
        self.result = False
    else:
      self.allError = 0.
      self.nonemptyError = 0.
      self.dynamicError = 0.
      self.size = 0
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3fqB().pack(_x.allError, _x.nonemptyError, _x.dynamicError, _x.size, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.allError, _x.nonemptyError, _x.dynamicError, _x.size, _x.result,) = _get_struct_3fqB().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3fqB().pack(_x.allError, _x.nonemptyError, _x.dynamicError, _x.size, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.allError, _x.nonemptyError, _x.dynamicError, _x.size, _x.result,) = _get_struct_3fqB().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fqB = None
def _get_struct_3fqB():
    global _struct_3fqB
    if _struct_3fqB is None:
        _struct_3fqB = struct.Struct("<3fqB")
    return _struct_3fqB
class UpdateGrid(object):
  _type          = 'fremen/UpdateGrid'
  _md5sum = 'ec761d237f96cedb8fde2a090de101cc'
  _request_class  = UpdateGridRequest
  _response_class = UpdateGridResponse
