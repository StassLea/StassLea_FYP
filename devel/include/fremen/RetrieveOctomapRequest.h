// Generated by gencpp from file fremen/RetrieveOctomapRequest.msg
// DO NOT EDIT!


#ifndef FREMEN_MESSAGE_RETRIEVEOCTOMAPREQUEST_H
#define FREMEN_MESSAGE_RETRIEVEOCTOMAPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fremen
{
template <class ContainerAllocator>
struct RetrieveOctomapRequest_
{
  typedef RetrieveOctomapRequest_<ContainerAllocator> Type;

  RetrieveOctomapRequest_()
    : mapname()
    , stamp(0.0)  {
    }
  RetrieveOctomapRequest_(const ContainerAllocator& _alloc)
    : mapname(_alloc)
    , stamp(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mapname_type;
  _mapname_type mapname;

   typedef double _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RetrieveOctomapRequest_

typedef ::fremen::RetrieveOctomapRequest_<std::allocator<void> > RetrieveOctomapRequest;

typedef boost::shared_ptr< ::fremen::RetrieveOctomapRequest > RetrieveOctomapRequestPtr;
typedef boost::shared_ptr< ::fremen::RetrieveOctomapRequest const> RetrieveOctomapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fremen::RetrieveOctomapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fremen

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'fremen': ['/home/stass/StassLea_FYP/devel/share/fremen/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c3c12589a7ea3e2551c7eb65f6e5b33";
  }

  static const char* value(const ::fremen::RetrieveOctomapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c3c12589a7ea3e2ULL;
  static const uint64_t static_value2 = 0x551c7eb65f6e5b33ULL;
};

template<class ContainerAllocator>
struct DataType< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fremen/RetrieveOctomapRequest";
  }

  static const char* value(const ::fremen::RetrieveOctomapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mapname\n\
float64 stamp\n\
";
  }

  static const char* value(const ::fremen::RetrieveOctomapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mapname);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RetrieveOctomapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fremen::RetrieveOctomapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fremen::RetrieveOctomapRequest_<ContainerAllocator>& v)
  {
    s << indent << "mapname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mapname);
    s << indent << "stamp: ";
    Printer<double>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FREMEN_MESSAGE_RETRIEVEOCTOMAPREQUEST_H
